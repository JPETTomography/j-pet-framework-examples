################################################################################
## Data analysis project based on J-PET Framework
## Created by J-PET Framework developers 2016-2020
##
## Description:
##   Data reconstruction in Modular J-PET Detector
################################################################################

cmake_minimum_required(VERSION 3.1...3.14)

if(${CMAKE_VERSION} VERSION_LESS 3.14)
    cmake_policy(VERSION ${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION})
else()
    cmake_policy(VERSION 3.14)
endif()

######################################################################
## Project name
######################################################################
set(projectName ModularDetectorAnalysis)

## Auxiliary files are copied to build directory after CMake
## You can add any files to this list
set(AUXILLIARY_FILES
  README.md
  userParamsModular.json
  calibration_scripts/README.md
  calibration_scripts/matrix_offests.C
  calibration_scripts/tof_synchro.C
  calibration_scripts/hit_tdiff_effvel.C
)

################################################################################
## Binary, header and source files definitions
set(projectBinary ${projectName}.x)
project(${projectName} CXX) # using only C++

## Name your header files with .h extension and source files with .cpp
file(GLOB HEADERS *.h
  ../NTupleExport/NTupler.h
  ../CommonTools/ToTEnergyConverterFactory.h
  ../CommonTools/ToTEnergyConverter.h)
file(GLOB SOURCES *.cpp
  ../NTupleExport/NTupler.cpp
  ../CommonTools/ToTEnergyConverterFactory.cpp
  ../CommonTools/ToTEnergyConverter.cpp)

add_executable(${projectBinary} ${SOURCES} ${HEADERS})
target_link_libraries(${projectBinary} JPetFramework::JPetFramework)

add_custom_target(clean_data_${projectName}
  COMMAND rm -f *.tslot.*.root *.phys.*.root *.sig.root
)

################################################################################
## Copy the example auxiliary files
file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/${AUXILIARY_FILES} DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/)

################################################################################
## Add new target that depends on copied files
add_custom_target(copy_files_${projectName} DEPENDS ${copy_depends})
## Add dependencies between building project and copy files
add_dependencies(${projectBinary} copy_files_${projectName})

################################################################################
## Unit tests
option(PACKAGE_TESTS "Build the tests" ON)
if(PACKAGE_TESTS)
    enable_testing()
    add_subdirectory(tests)
endif()
